import{_ as r,M as d,p as n,q as o,R as e,N as l,V as i,t as a,a1 as h}from"./framework-c4f3d865.js";const c={},s=e("h1",{id:"面向对象",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#面向对象","aria-hidden":"true"},"#"),a(" 面向对象")],-1),p={class:"table-of-contents"},u=h('<p>面向对象是一种思想，世界万物都可以看做一个对象，对于编程来说，即面向对象编程，Java是一个支持并发、基于类和面向对象的计算机编程语言，面向对象有如下优点:</p><ol><li>代码开发模块化，更容易修改和维护</li><li>代码复用性强</li><li>增强代码的可靠性和灵活性</li><li>增加代码的可读性</li></ol><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装" aria-hidden="true">#</a> 封装</h3><p>给对象提供隐藏内部特性和行为的能力，对象提供的供外部对象访问的方法改变它内部的数据。在Java中，有四种修饰符，default、public、private、protected。每一种权限修饰符为其他位于同一包或者不同包提供了不同的访问权限。封装的好处：</p><ul><li>通过隐藏对象的属性来保护对象内部的状态。</li><li>提高了代码的可变性和维护性，因为对象的行为可以被单独改变或者拓展。</li><li>禁止对象之间的不良的交互提高模块化</li></ul><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><p>给对象提供了从基类获取字段和方法的能力，继承提供了代码重用行，也可以在不改变基类的情况下给现存的类添加新特性。</p><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h3><p>编程语言给不同的底层数据类型做相同接口展示的一种能力，一个多态类型的操作，可以应用到其他类型的值上面。</p><h3 id="抽象" tabindex="-1"><a class="header-anchor" href="#抽象" aria-hidden="true">#</a> 抽象</h3><p>把想法从具体的实例中分离出来的步骤，因此要根据他们的功能而不是实现细节来创建类。</p><p>Java支持创建只暴露接口而不包含具体实现的抽象类，这种抽象的技术将类的行为和实现细节分离。</p><h4 id="面向过程和面向对象的区别" tabindex="-1"><a class="header-anchor" href="#面向过程和面向对象的区别" aria-hidden="true">#</a> 面向过程和面向对象的区别</h4><p>面向过程：</p><p>优点：性能比面向对象高，因为类调用需要实例化，开销比较大，比较消耗资源。</p><p>缺点：不易复用、拓展、维护</p><p>面向对象</p><p>优点：易于维护、拓展、复用，由于面向对象有封装、继承、多态的特性，可以设计出低耦合的系统，使系统更加灵活。</p>',18);function _(f,x){const t=d("router-link");return n(),o("div",null,[s,e("nav",p,[e("ul",null,[e("li",null,[l(t,{to:"#封装"},{default:i(()=>[a("封装")]),_:1})]),e("li",null,[l(t,{to:"#继承"},{default:i(()=>[a("继承")]),_:1})]),e("li",null,[l(t,{to:"#多态"},{default:i(()=>[a("多态")]),_:1})]),e("li",null,[l(t,{to:"#抽象"},{default:i(()=>[a("抽象")]),_:1})])])]),u])}const m=r(c,[["render",_],["__file","object.html.vue"]]);export{m as default};
