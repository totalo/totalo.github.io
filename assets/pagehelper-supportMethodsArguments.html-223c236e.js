import{_ as e,M as o,p as c,q as l,R as n,N as t,V as p,t as s,a1 as u}from"./framework-d81ad7e5.js";const i="/images/pagehelper-supportMethodsArguments-01.jpeg",r={},k=n("h1",{id:"mybatis-pagehelper配置参数supportmethodsarguments引起的血案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mybatis-pagehelper配置参数supportmethodsarguments引起的血案","aria-hidden":"true"},"#"),s(" Mybatis-Pagehelper配置参数supportMethodsArguments引起的血案")],-1),d={class:"table-of-contents"},g=u(`<h3 id="_0x00-背景" tabindex="-1"><a class="header-anchor" href="#_0x00-背景" aria-hidden="true">#</a> 0x00 背景</h3><p>一个历史悠久的项目，使用的技术栈主要是 spring cloud 体系，属于 service 范畴，不给外部提供接口，但是集成了 myabtis-pagehelper，具体的版本如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关的配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">pagehelper</span><span class="token punctuation">:</span>
  <span class="token key atrule">helperDialect</span><span class="token punctuation">:</span> mysql
  <span class="token key atrule">reasonable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">supportMethodsArguments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">params</span><span class="token punctuation">:</span> count=countSql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_0x01-现象描述" tabindex="-1"><a class="header-anchor" href="#_0x01-现象描述" aria-hidden="true">#</a> 0x01 现象描述</h3><p>同事在这个项目中新增加了一个总能，属于定时执行的，循环取数据，每次取 1000 条，但是上线后发现第一次能正常查询出数据，但是第二次往后就查询不出数据了，但是数据库中是有数据的。SQL 如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- sql 已经做简化处理</span>
<span class="token keyword">select</span>
    <span class="token operator">*</span>
<span class="token keyword">from</span> \${tableName}
<span class="token keyword">where</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token comment">#{type,jdbcType=VARCHAR}</span>
    <span class="token operator">and</span> <span class="token keyword">time</span> <span class="token operator">&gt;=</span> <span class="token comment">#{time,jdbcType=TIMESTAMP}</span>
    <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">&quot;pageSize != null and pageSize != &#39;&#39; and pageNum!=null and pageNum!=&#39;&#39;&quot;</span><span class="token operator">&gt;</span>
        <span class="token keyword">limit</span> <span class="token comment">#{pageNum}, #{pageSize}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_0x02-问题分析" tabindex="-1"><a class="header-anchor" href="#_0x02-问题分析" aria-hidden="true">#</a> 0x02 问题分析</h3><p>刚刚开始以为是 sql 和数据的问题，一顿分析，将 sql 的参数参数打印出来后，用工具查询发现是能查询出数据的。由此判断不是参数以及sql 的问题，于是添加 mybatis 的参数将 sql 打印出来。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看查询的过程， 发现每一次查询会先执行一个 count 操作，查询总数，总数查询完成后，再去执行查询操作。第一次 count 是有数据，但是第二次查询 count 查询的总数为 0，导致也就不执行查询操作了。看完查询过程后，同事说他这个不是分页，我有个疑问为啥会执行分页操作呢，但是也没多想。继续排查对比。</p><p>经过对比前后两次的 count 的 sql 发现，第二次的 count 的 sql 多了一个 limit，而此时的 pageNum 和 pageSize 变成了 1，1。 count 的结果总列数就是 1，limit 1, 1 后肯定是没有结果的。</p><p><img src="`+i+`" alt="image"></p><h3 id="_0x03-问题解决" tabindex="-1"><a class="header-anchor" href="#_0x03-问题解决" aria-hidden="true">#</a> 0x03 问题解决</h3><p>发现这个情况后，前面说过他应该不走分页逻辑，应该是正常自定义 limit，也就是说不应该会前置执行 count 计数查询，而应该直接去查询数据。猜想是 pageNum 和 pageSize 两个参数导致的，将参数改名后发现正常执行查询而不执行 count 操作了。</p><p>那么究竟是为啥会这样呢，经过查看源码，发现在 PageParams 中有如下的逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterObject <span class="token keyword">instanceof</span> <span class="token class-name">IPage</span> <span class="token operator">||</span> supportMethodsArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    page <span class="token operator">=</span> <span class="token class-name">PageObjectUtil</span><span class="token punctuation">.</span><span class="token function">getPageFromObject</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果参数实现了 IPage 接口或者 supportMethodsArguments 为 true 就会从参数中获取 pageNum 和 pageSize 参数，也就是当 supportMethodsArguments 为 true 时并且参数中有 pageNum 和 pageSize 参数时，会执行分页的相关逻辑。</p><h3 id="_0x04-总结" tabindex="-1"><a class="header-anchor" href="#_0x04-总结" aria-hidden="true">#</a> 0x04 总结</h3><p>总的来说，supportMethodsArguments 为 true 时需要特别注意，传递的参数中不能有 pageNum 和 pageSize 参数，否则会执行分页逻辑。</p><p>带着好奇心去看了一下 pagehepler 的源码，发现某些特殊的 sql 走分页逻辑时，会重写成子查询，比如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> so<span class="token punctuation">.</span>id<span class="token punctuation">,</span>so<span class="token punctuation">.</span>address<span class="token punctuation">,</span>so<span class="token punctuation">.</span>area_code<span class="token punctuation">,</span>so<span class="token punctuation">.</span>area_id<span class="token punctuation">,</span>so<span class="token punctuation">.</span>del_flag<span class="token punctuation">,</span>so<span class="token punctuation">.</span>email<span class="token punctuation">,</span>so<span class="token punctuation">.</span>fax<span class="token punctuation">,</span>so<span class="token punctuation">.</span>grade<span class="token punctuation">,</span>so<span class="token punctuation">.</span>icon<span class="token punctuation">,</span>so<span class="token punctuation">.</span>master<span class="token punctuation">,</span> so<span class="token punctuation">.</span>name<span class="token punctuation">,</span>so<span class="token punctuation">.</span>parent_id<span class="token punctuation">,</span>so<span class="token punctuation">.</span>parent_ids<span class="token punctuation">,</span>so<span class="token punctuation">.</span>phone<span class="token punctuation">,</span>so<span class="token punctuation">.</span>remarks<span class="token punctuation">,</span>so<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">,</span>so<span class="token punctuation">.</span>zip_code <span class="token keyword">from</span> sys_organization so <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> sys_user_organization suo <span class="token keyword">ON</span> <span class="token punctuation">(</span>suo<span class="token punctuation">.</span>org_id <span class="token operator">=</span> so<span class="token punctuation">.</span>id <span class="token operator">or</span> FIND_IN_SET<span class="token punctuation">(</span>suo<span class="token punctuation">.</span>org_id<span class="token punctuation">,</span>so<span class="token punctuation">.</span>parent_ids<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">where</span> suo<span class="token punctuation">.</span>user_id <span class="token operator">=</span> ? <span class="token keyword">group</span> <span class="token keyword">by</span> so<span class="token punctuation">.</span>id <span class="token keyword">LIMIT</span> ? &quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成的 count 语句是：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> so<span class="token punctuation">.</span>id<span class="token punctuation">,</span> so<span class="token punctuation">.</span>address<span class="token punctuation">,</span> so<span class="token punctuation">.</span>area_code<span class="token punctuation">,</span> so<span class="token punctuation">.</span>area_id<span class="token punctuation">,</span> so<span class="token punctuation">.</span>del_flag<span class="token punctuation">,</span> so<span class="token punctuation">.</span>email<span class="token punctuation">,</span> so<span class="token punctuation">.</span>fax<span class="token punctuation">,</span> so<span class="token punctuation">.</span>grade<span class="token punctuation">,</span> so<span class="token punctuation">.</span>icon<span class="token punctuation">,</span> so<span class="token punctuation">.</span>master<span class="token punctuation">,</span> so<span class="token punctuation">.</span>name<span class="token punctuation">,</span> so<span class="token punctuation">.</span>parent_id<span class="token punctuation">,</span> so<span class="token punctuation">.</span>parent_ids<span class="token punctuation">,</span> so<span class="token punctuation">.</span>phone<span class="token punctuation">,</span> so<span class="token punctuation">.</span>remarks<span class="token punctuation">,</span> so<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">,</span> so<span class="token punctuation">.</span>zip_code <span class="token keyword">FROM</span> sys_organization so <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> sys_user_organization suo <span class="token keyword">ON</span> <span class="token punctuation">(</span>suo<span class="token punctuation">.</span>org_id <span class="token operator">=</span> so<span class="token punctuation">.</span>id <span class="token operator">OR</span> FIND_IN_SET<span class="token punctuation">(</span>suo<span class="token punctuation">.</span>org_id<span class="token punctuation">,</span> so<span class="token punctuation">.</span>parent_ids<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> suo<span class="token punctuation">.</span>user_id <span class="token operator">=</span> ? <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> so<span class="token punctuation">.</span>id <span class="token keyword">LIMIT</span> ?<span class="token punctuation">)</span> table_count
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看了一下源码是有特殊的判断，我们遇到的那个 sql 不满条件，所以只是简单的重写了 sql，没有重写成子查询。</p><p>因为是 count 语句的话其实不应该有 limit，有 limit 的话多多少少有点问题。也尝试修复了一下，虽然能重写成子查询，虽然查询 count 正常了，后续正常的查询就不正常（需要处理 sql 的参数，看逻辑后续会还拼接 limit 导致语法错误，想想也没有啥意义（虽然带了 limit但是可能也不是分页），所以还是放弃了。后续关注下，看看作者大大有没有更好的解决办法。</p>`,27);function m(v,b){const a=o("router-link");return c(),l("div",null,[k,n("nav",d,[n("ul",null,[n("li",null,[t(a,{to:"#_0x00-背景"},{default:p(()=>[s("0x00 背景")]),_:1})]),n("li",null,[t(a,{to:"#_0x01-现象描述"},{default:p(()=>[s("0x01 现象描述")]),_:1})]),n("li",null,[t(a,{to:"#_0x02-问题分析"},{default:p(()=>[s("0x02 问题分析")]),_:1})]),n("li",null,[t(a,{to:"#_0x03-问题解决"},{default:p(()=>[s("0x03 问题解决")]),_:1})]),n("li",null,[t(a,{to:"#_0x04-总结"},{default:p(()=>[s("0x04 总结")]),_:1})])])]),g])}const y=e(r,[["render",m],["__file","pagehelper-supportMethodsArguments.html.vue"]]);export{y as default};
