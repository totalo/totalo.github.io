import{_ as p,M as o,p as c,q as l,R as n,N as e,V as t,t as a,a1 as i}from"./framework-d81ad7e5.js";const u="/images/log4j-deadlock_1.png",r="/images/log4j-deadlock_2.png",d={},k=n("h1",{id:"日志量突增导致线上出现大面积的超时-机器cpu负载过高",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#日志量突增导致线上出现大面积的超时-机器cpu负载过高","aria-hidden":"true"},"#"),a(" 日志量突增导致线上出现大面积的超时，机器cpu负载过高")],-1),v={class:"table-of-contents"},m=i('<h3 id="现象描述" tabindex="-1"><a class="header-anchor" href="#现象描述" aria-hidden="true">#</a> 现象描述</h3><p>一台机器不同端口，两个相同的进程，出现机器负载过高，dump发现log4j callApender阻塞</p><p><img src="'+u+`" alt="image"></p><h3 id="问题分析" tabindex="-1"><a class="header-anchor" href="#问题分析" aria-hidden="true">#</a> 问题分析</h3><p>线上未进行相关的变更，与之前相比，仅仅是日志量增加了，根据这个点，进一步排查 发现log4j的appender是一个队列，队列的大小默认是512，当队列满了之后，会阻塞，直到队列有空闲位置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callAppenders</span><span class="token punctuation">(</span><span class="token class-name">LoggingEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> writes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Category</span> c <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> c<span class="token operator">=</span>c<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Protected against simultaneous call to addAppender, removeAppender,...</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>aai <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        writes <span class="token operator">+=</span> c<span class="token punctuation">.</span>aai<span class="token punctuation">.</span><span class="token function">appendLoopOnAppenders</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">.</span>additive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>writes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    repository<span class="token punctuation">.</span><span class="token function">emitNoAppenderWarning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决方案-升级至log4j2解决了相关的问题" tabindex="-1"><a class="header-anchor" href="#解决方案-升级至log4j2解决了相关的问题" aria-hidden="true">#</a> 解决方案：升级至log4j2解决了相关的问题</h3><p>但是发现，还是会存在死锁问题，通过分析发现log4j2-disruptor队列有问题，导致阻塞。</p><p><img src="`+r+'" alt="image"></p><p>解决方案：升级log4j2的版本</p><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h3><ol><li>https://www.cnblogs.com/flystar32/p/6751895.html</li><li>https://github.com/apache/logging-log4j2/commit/7a7f5e4ed1ce8a27357a12a06d32ca2b04e5eb56</li></ol>',12);function h(g,b){const s=o("router-link");return c(),l("div",null,[k,n("nav",v,[n("ul",null,[n("li",null,[e(s,{to:"#现象描述"},{default:t(()=>[a("现象描述")]),_:1})]),n("li",null,[e(s,{to:"#问题分析"},{default:t(()=>[a("问题分析")]),_:1})]),n("li",null,[e(s,{to:"#解决方案-升级至log4j2解决了相关的问题"},{default:t(()=>[a("解决方案：升级至log4j2解决了相关的问题")]),_:1})]),n("li",null,[e(s,{to:"#参考资料"},{default:t(()=>[a("参考资料")]),_:1})])])]),m])}const f=p(d,[["render",h],["__file","log4j-deadlock.html.vue"]]);export{f as default};
